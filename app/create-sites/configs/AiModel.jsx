const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
} = require("@google/generative-ai");

const apiKey = process.env.NEXT_PUBLIC_GEMNI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash",
});

const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "text/plain",
};

const CodeGenerationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "application/json",
};



export const chatSession = model.startChat({
    generationConfig,
    history: [
    ],
});

export const GenAiCode = model.startChat({
    generationConfig:CodeGenerationConfig,
    history: [
        {
          role: "user",
          parts: [
            {text: "Generate a to do app : Generate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \nwithout any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\nalso you can use date-fns for date format and react-chartjs-2 chart, graph library\n\nReturn the response in JSON format with the following schema:\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\n\nHere‚Äôs the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\n\nReturn the response in JSON format with the following schema:\n\njson\nCopy code\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file's code should be included in the code field, following this example:\nfiles:{\n  \"/App.js\": {\n    \"code\": \"import React from 'react';\\nimport './styles.css';\\nexport default function App() {\\n  return (\\n    <div className='p-4 bg-gray-100 text-center'>\\n      <h1 className='text-2xl font-bold text-blue-500'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className='mt-2 text-gray-700'>This is a live code editor.</p>\\n    </div>\\n  );\\n}\"\n  }\n}\n  Additionally, include an explanation of the project's structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,\"firebase\",\"@google/generative-ai\" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  -Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\n- By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\n- Use icons from lucide-react for logos.\n\n- Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.\n   "},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"projectTitle\": \"React To-Do App\",\n  \"explanation\": \"This React To-Do app provides a user-friendly interface for managing tasks. It features components for task input, display, and filtering, all styled with Tailwind CSS. Users can add, delete, edit, and mark tasks as complete. The app utilizes local storage to persist data, ensuring tasks are saved even after the browser is closed. It also uses `date-fns` to format the date and `react-chartjs-2` to create statistics of the todos.\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"import React, { useState, useEffect } from 'react';\\nimport TaskInput from './components/TaskInput/TaskInput';\\nimport TaskList from './components/TaskList/TaskList';\\nimport Filter from './components/Filter/Filter';\\nimport { Trash, Edit, Check, X } from 'lucide-react';\\nimport { format } from 'date-fns';\\nimport { Doughnut } from 'react-chartjs-2';\\nimport {Chart, ArcElement, Tooltip, Legend} from 'chart.js'\\nChart.register(ArcElement, Tooltip, Legend);\\n\\n\\n\\nconst App = () => {\\n  const [tasks, setTasks] = useState(() => {\\n    const storedTasks = localStorage.getItem('tasks');\\n    return storedTasks ? JSON.parse(storedTasks) : [];\\n  });\\n  const [filter, setFilter] = useState('all');\\n  const [query, setQuery] = useState('');\\n\\n  useEffect(() => {\\n    localStorage.setItem('tasks', JSON.stringify(tasks));\\n  }, [tasks]);\\n\\n  const addTask = (text) => {\\n    const newTask = {\\n      id: Date.now(),\\n      text,\\n      completed: false,\\n      dateAdded: new Date(),\\n    };\\n    setTasks([...tasks, newTask]);\\n  };\\n\\n  const deleteTask = (id) => {\\n    setTasks(tasks.filter((task) => task.id !== id));\\n  };\\n\\n  const toggleComplete = (id) => {\\n    setTasks(\\n      tasks.map((task) =>\\n        task.id === id ? { ...task, completed: !task.completed } : task\\n      )\\n    );\\n  };\\n\\n  const editTask = (id, newText) => {\\n    setTasks(\\n      tasks.map((task) =>\\n        task.id === id ? { ...task, text: newText } : task\\n      )\\n    );\\n  };\\n\\n  const filteredTasks = tasks.filter((task) => {\\n    if (filter === 'completed') {\\n      return task.completed;\\n    } else if (filter === 'active') {\\n      return !task.completed;\\n    }\\n    return true;\\n  }).filter(task => task.text.toLowerCase().includes(query.toLowerCase()));\\n\\n  const completedTasksCount = tasks.filter(task => task.completed).length;\\n  const activeTasksCount = tasks.filter(task => !task.completed).length;\\n  const chartData = {\\n    labels: ['Completed', 'Active'],\\n    datasets: [\\n      {\\n        data: [completedTasksCount, activeTasksCount],\\n        backgroundColor: ['#36A2EB', '#FFCE56'],\\n        hoverBackgroundColor: ['#36A2EB', '#FFCE56'],\\n      },\\n    ],\\n  };\\n\\n  return (\\n    <div className=\\\"min-h-screen bg-gray-100 py-6 flex flex-col justify-center sm:py-12\\\">\\n      <div className=\\\"relative py-3 sm:max-w-xl sm:mx-auto\\\">\\n        <div className=\\\"absolute inset-0 bg-gradient-to-r from-blue-300 to-blue-600 shadow-lg transform -skew-y-6 sm:skew-y-0 sm:-rotate-6 sm:rounded-3xl\\\"></div>\\n        <div className=\\\"relative px-4 py-10 bg-white shadow-lg sm:rounded-3xl sm:p-20\\\">\\n          <div className=\\\"max-w-md mx-auto\\\">\\n            <div>\\n              <h1 className=\\\"text-2xl font-semibold text-gray-800 text-center\\\">My To-Do List üìù</h1>\\n            </div>\\n            <div className=\\\"divide-y divide-gray-200\\\">\\n              <TaskInput addTask={addTask} />\\n              <Filter setFilter={setFilter} setQuery={setQuery} />\\n              <TaskList\\n                tasks={filteredTasks}\\n                deleteTask={deleteTask}\\n                toggleComplete={toggleComplete}\\n                editTask={editTask}\\n              />\\n                <div>\\n                  <Doughnut data={chartData} />\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport default App;\",\n      \"description\": \"Main application component that orchestrates the To-Do app functionality.\"\n    },\n    \"/components/TaskInput/TaskInput.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { Plus } from 'lucide-react';\\n\\nconst TaskInput = ({ addTask }) => {\\n  const [text, setText] = useState('');\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    if (text.trim() !== '') {\\n      addTask(text);\\n      setText('');\\n    }\\n  };\\n\\n  return (\\n    <div className=\\\"py-3 text-sm\\\">\\n      <form onSubmit={handleSubmit} className=\\\"flex items-center\\\">\\n        <input\\n          type=\\\"text\\\"\\n          placeholder=\\\"Add a new task...\\\" \\n          value={text}\\n          onChange={(e) => setText(e.target.value)}\\n          className=\\\"w-full px-4 py-2 border rounded-md text-gray-700 focus:outline-none focus:border-blue-500 shadow-sm\\\"\\n        />\\n        <button\\n          type=\\\"submit\\\"\\n          className=\\\"ml-2 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md focus:outline-none focus:shadow-outline\\\"\\n        >\\n          <Plus className=\\\"h-5 w-5\\\" />\\n        </button>\\n      </form>\\n    </div>\\n  );\\n};\\n\\nexport default TaskInput;\",\n      \"description\": \"Component for adding new tasks to the list.\"\n    },\n    \"/components/TaskList/TaskList.js\": {\n      \"code\": \"import React from 'react';\\nimport TaskItem from '../TaskItem/TaskItem';\\n\\nconst TaskList = ({ tasks, deleteTask, toggleComplete, editTask }) => {\\n  return (\\n    <ul className=\\\"divide-y divide-gray-200\\\">\\n      {tasks.length === 0 ? (\\n        <li className=\\\"py-4 text-gray-500 text-center\\\">No tasks found. Add some! ‚ú®</li>\\n      ) : (\\n        tasks.map((task) => (\\n          <TaskItem\\n            key={task.id}\\n            task={task}\\n            deleteTask={deleteTask}\\n            toggleComplete={toggleComplete}\\n            editTask={editTask}\\n          />\\n        ))\\n      )}\\n    </ul>\\n  );\\n};\\n\\nexport default TaskList;\",\n      \"description\": \"Component to display the list of tasks.\"\n    },\n    \"/components/TaskItem/TaskItem.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { Trash, Edit, Check, X } from 'lucide-react';\\nimport { format } from 'date-fns';\\n\\nconst TaskItem = ({ task, deleteTask, toggleComplete, editTask }) => {\\n  const [isEditing, setIsEditing] = useState(false);\\n  const [editText, setEditText] = useState(task.text);\\n\\n  const handleEdit = () => {\\n    if (editText.trim() !== '') {\\n      editTask(task.id, editText);\\n      setIsEditing(false);\\n    }\\n  };\\n\\n  return (\\n    <li className=\\\"py-4 flex items-center justify-between\\\">\\n      {isEditing ? (\\n        <input\\n          type=\\\"text\\\"\\n          value={editText}\\n          onChange={(e) => setEditText(e.target.value)}\\n          className=\\\"w-full px-2 py-1 border rounded-md text-gray-700 focus:outline-none focus:border-blue-500 shadow-sm\\\"\\n          onBlur={handleEdit}\\n          onKeyDown={(e) => {if (e.key === 'Enter') {handleEdit()}}}\\n        />\\n      ) : (\\n        <div className=\\\"flex items-center\\\">\\n          <input\\n            type=\\\"checkbox\\\"\\n            checked={task.completed}\\n            onChange={() => toggleComplete(task.id)}\\n            className=\\\"mr-2 h-5 w-5 text-blue-500 focus:ring-blue-500 border-gray-300 rounded\\\"\\n          />\\n          <span className={`text-gray-700 ${task.completed ? 'line-through text-gray-500' : ''}`}>\\n            {task.text}\\n          </span>\\n        </div>\\n      )}\\n       <div className=\\\"text-gray-500 ml-2 text-xs\\\">{format(task.dateAdded, 'MMM dd, yyyy')}</div>\\n      <div>\\n        {\\n          !isEditing &&\\n          <button onClick={() => setIsEditing(true)} className=\\\"mx-1 hover:text-blue-500\\\">\\n            <Edit className=\\\"h-4 w-4\\\"/>\\n          </button>\\n        }\\n        <button onClick={() => deleteTask(task.id)} className=\\\"mx-1 hover:text-red-500\\\">\\n          <Trash className=\\\"h-4 w-4\\\" />\\n        </button>\\n      </div>\\n    </li>\\n  );\\n};\\n\\nexport default TaskItem;\",\n      \"description\": \"Component representing a single task item in the list.\"\n    },\n    \"/components/Filter/Filter.js\": {\n      \"code\": \"import React from 'react';\\nimport { Search } from 'lucide-react';\\n\\nconst Filter = ({ setFilter, setQuery }) => {\\n  return (\\n    <div className=\\\"py-3 flex items-center justify-between\\\">\\n      <div className=\\\"flex space-x-2\\\">\\n        <button onClick={() => setFilter('all')} className=\\\"px-3 py-1 rounded-md text-sm font-medium bg-gray-200 hover:bg-gray-300\\\">All</button>\\n        <button onClick={() => setFilter('active')} className=\\\"px-3 py-1 rounded-md text-sm font-medium bg-gray-200 hover:bg-gray-300\\\">Active</button>\\n        <button onClick={() => setFilter('completed')} className=\\\"px-3 py-1 rounded-md text-sm font-medium bg-gray-200 hover:bg-gray-300\\\">Completed</button>\\n      </div>\\n      <div className=\\\"relative text-gray-600\\\">\\n        <input\\n          type=\\\"search\\\"\\n          name=\\\"search\\\"\\n          placeholder=\\\"Search\\\" \\n          className=\\\"bg-white h-10 px-5 pr-10 rounded-full text-sm focus:outline-none border shadow-sm\\\"\\n          onChange={e => setQuery(e.target.value)}\\n        />\\n        <button type=\\\"submit\\\" className=\\\"absolute right-0 top-0 mt-3 mr-4\\\">\\n          <Search className=\\\"h-5 w-5\\\"/>\\n        </button>\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport default Filter;\",\n      \"description\": \"Component for filtering tasks based on their completion status.\"\n    }\n  },\n  \"generatedFiles\": [\n    \"/App.js\",\n    \"/components/TaskInput/TaskInput.js\",\n    \"/components/TaskList/TaskList.js\",\n    \"/components/TaskItem/TaskItem.js\",\n    \"/components/Filter/Filter.js\"\n  ]\n}\n```"},
          
          ],
        },
      ],
});

// const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
// console.log(result.response.text());
